{"version":3,"sources":["stretchy.js"],"names":["$$","expr","con","Node","Window","slice","call","document","querySelectorAll","self","Element","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","_","Stretchy","selectors","base","split","join","filter","script","currentScript","pop","resize","element","resizes","cs","getComputedStyle","offset","value","placeholder","empty","type","nodeName","toLowerCase","style","height","boxSizing","parseFloat","borderBottomWidth","borderTopWidth","clientHeight","minHeight","Math","max","scrollHeight","width","offsetWidth","clientWidth","minWidth","scrollLeft","scrollWidth","length","selectedIndex","option","createElement","textContent","options","parentNode","insertBefore","nextSibling","appearance","property","test","removeChild","resizeAll","elements","forEach","active","init","getAttribute","body","readyState","addEventListener","listener","evt","target","documentElement","MutationObserver","mutations","mutation","addedNodes","observe","childList","subtree"],"mappings":"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","file":"stretchy.min.js","sourcesContent":["/*\n * Stretchy: Form element autosizing, the way it should be.\n * by Lea Verou http://lea.verou.me\n * MIT license\n */\n(function() {\n\nif (!self.Element) {\n\treturn; // super old browser\n}\n\nif (!Element.prototype.matches) {\n\tElement.prototype.matches = Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || null;\n}\n\nif (!Element.prototype.matches) {\n\treturn;\n}\n\nfunction $$(expr, con) {\n\treturn expr instanceof Node || expr instanceof Window? [expr] :\n\t       [].slice.call(typeof expr == \"string\"? (con || document).querySelectorAll(expr) : expr || []);\n}\n\nvar _ = self.Stretchy = {\n\tselectors: {\n\t\tbase: 'textarea, select:not([size]), input:not([type]), input[type=\"' + \"text url email tel\".split(\" \").join('\"], input[type=\"') + '\"]',\n\t\tfilter: \"*\"\n\t},\n\n\t// Script element this was included with, if any\n\tscript: document.currentScript || $$(\"script\").pop(),\n\n\t// Autosize one element. The core of Stretchy.\n\tresize: function(element) {\n\t\tif (!_.resizes(element)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar cs = getComputedStyle(element);\n\t\tvar offset = 0;\n\n\t\tif (!element.value && element.placeholder) {\n\t\t\tvar empty = true;\n\t\t\telement.value = element.placeholder;\n\t\t}\n\n\t\tvar type = element.nodeName.toLowerCase();\n\n\t\tif (type == \"textarea\") {\n\t\t\telement.style.height = \"0\";\n\n\t\t\tif (cs.boxSizing == \"border-box\") {\n\t\t\t\toffset = parseFloat(cs.borderBottomWidth) + parseFloat(cs.borderTopWidth);\n\t\t\t}\n\t\t\telse if (cs.boxSizing == \"content-box\") {\n\t\t\t\toffset = -element.clientHeight + parseFloat(cs.minHeight);\n\t\t\t}\n\n\t\t\tvar height = Math.max(parseFloat(cs.minHeight), element.scrollHeight)\n\t\t\telement.style.height = height + offset + \"px\";\n\t\t}\n\t\telse if(type == \"input\") {\n\t\t\t// First test that it is actually visible, otherwise all measurements are off\n\t\t\telement.style.width = \"1000px\";\n\n\t\t\tif (element.offsetWidth) {\n\t\t\t\telement.style.width = \"0\";\n\n\t\t\t\tif (cs.boxSizing == \"border-box\") {\n\t\t\t\t\toffset = element.offsetWidth;\n\t\t\t\t}\n\t\t\t\telse if (cs.boxSizing == \"padding-box\") {\n\t\t\t\t\toffset = element.clientWidth;\n\t\t\t\t}\n\t\t\t\telse if (cs.boxSizing == \"content-box\") {\n\t\t\t\t\toffset = parseFloat(cs.minWidth);\n\t\t\t\t}\n\n\t\t\t\t// Safari misreports scrollWidth, so we will instead set scrollLeft to a\n\t\t\t\t// huge number, and read that back to see what it was clipped to\n\t\t\t\telement.scrollLeft = 1e+10;\n\n\t\t\t\tvar width = Math.max(element.scrollLeft + offset, element.scrollWidth - element.clientWidth);\n\n\t\t\t\telement.style.width = width + \"px\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Element is invisible, just set to something reasonable\n\t\t\t\telement.style.width = element.value.length + 1 + \"ch\";\n\t\t\t}\n\t\t}\n\t\telse if (type == \"select\") {\n\t\t\tvar selectedIndex = element.selectedIndex > 0? element.selectedIndex : 0;\n\n\t\t\t// Need to use dummy element to measure :(\n\t\t\tvar option = document.createElement(\"_\");\n\t\t\toption.textContent = element.options[selectedIndex].textContent;\n\t\t\telement.parentNode.insertBefore(option, element.nextSibling);\n\n\t\t\t// The name of the appearance property, as it might be prefixed\n\t\t\tvar appearance;\n\n\t\t\tfor (var property in cs) {\n\t\t\t\tvar value = cs[property];\n\t\t\t\tif (!/^(width|webkitLogicalWidth|length)$/.test(property) && typeof value == \"string\") {\n\t\t\t\t\t//console.log(property, option.offsetWidth, cs[property]);\n\t\t\t\t\toption.style[property] = value;\n\n\t\t\t\t\tif (/appearance$/i.test(property)) {\n\t\t\t\t\t\tappearance = property;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toption.style.width = \"\";\n\n\t\t\tif (option.offsetWidth > 0) {\n\t\t\t\telement.style.width = option.offsetWidth + \"px\";\n\n\t\t\t\tif (!cs[appearance] || cs[appearance] !== \"none\") {\n\t\t\t\t\t// Account for arrow\n\t\t\t\t\telement.style.width = \"calc(\" + element.style.width + \" + 2em)\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toption.parentNode.removeChild(option);\n\t\t\toption = null;\n\t\t}\n\n\t\tif (empty) {\n\t\t\telement.value = \"\";\n\t\t}\n\t},\n\n\t// Autosize multiple elements\n\tresizeAll: function(elements) {\n\t\t$$(elements || _.selectors.base).forEach(function (element) {\n\t\t\t_.resize(element);\n\t\t});\n\t},\n\n\tactive: true,\n\n\t// Will stretchy do anything for this element?\n\tresizes: function(element) {\n\t\treturn element &&\n\t\t       element.parentNode &&\n\t\t       element.matches &&\n\t\t       element.matches(_.selectors.base) &&\n\t\t       element.matches(_.selectors.filter);\n\t},\n\n\tinit: function(){\n\t\t_.selectors.filter = _.script.getAttribute(\"data-filter\") ||\n\t\t                     ($$(\"[data-stretchy-filter]\").pop() || document.body).getAttribute(\"data-stretchy-filter\") || Stretchy.selectors.filter || \"*\";\n\n\t\t_.resizeAll();\n\t},\n\n\t$$: $$\n};\n\n// Autosize all elements once the DOM is loaded\n\n// DOM already loaded?\nif (document.readyState !== \"loading\") {\n\t_.init();\n}\nelse {\n\t// Wait for it\n\tdocument.addEventListener(\"DOMContentLoaded\", _.init);\n}\n\n// Listen for changes\nvar listener = function(evt) {\n\tif (_.active) {\n\t\t_.resize(evt.target);\n\t}\n};\n\ndocument.documentElement.addEventListener(\"input\", listener);\n\n// Firefox fires a change event instead of an input event\ndocument.documentElement.addEventListener(\"change\", listener);\n\n// Listen for new elements\nif (self.MutationObserver) {\n\t(new MutationObserver(function(mutations) {\n\t\tif (_.active) {\n\t\t\tmutations.forEach(function(mutation) {\n\t\t\t\tif (mutation.type == \"childList\") {\n\t\t\t\t\tStretchy.resizeAll(mutation.addedNodes);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t})).observe(document.documentElement, {\n\t\tchildList: true,\n\t\tsubtree: true\n\t});\n}\n\n})();\n"]}